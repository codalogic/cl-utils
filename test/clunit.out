Tests run on Wed Aug 16 14:54:18 2017

    CommandLineArgs [test-command-line-args.cpp:92]
    ===============================================
      : CommandLineArgs cla( SIZED_ARGV( argv_none ) )
    ok: cla == false
    ok: cla.empty()
      : is_fake_help_run = false
      : CommandLineArgs cla( SIZED_ARGV( argv_none ), fake_help )
    ok: is_fake_help_run == true
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_none ) )
    ok: cla.empty()
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_help ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "?" )
    ok: cla.is_flag( "h", "?" )
    ok: cla.is_flag( "?", "h" )
    ok: cla.flag_marker() == std::string( "-" )
    ok: cla.flag_name() == std::string( "?" )
    ok: cla.flag() == "-?"
    ok: cla.is_flag( "other" ) == false
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag() == false
    ok: cla.current() == std::string( "my-file.txt" )
    ok: cla.flag_marker() == std::string( "" )
    ok: cla.flag_name() == std::string( "" )
    ok: cla.flag() == ""
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag() == false
    ok: cla.is_flag( "y-file.txt" ) == false
    ok: cla.is_flag( "xmy-file.txt" ) == false
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_single_file_name ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "o" )
    ok: cla.flag_marker() == std::string( "-" )
    ok: cla.flag_name() == std::string( "o" )
    ok: cla.flag() == "-o"
    ok: cla.is_flag( "o", 0 )
    ok: cla.is_flag( "o", 1 )
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_single_file_name ) )
    ok: cla.is_flag( "o", 2 ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "o", 1 )
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_long_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "output", 1 )
    ok: cla.flag_marker() == std::string( "-" )
    ok: cla.flag_name() == std::string( "output" )
    ok: cla.flag() == "-output"
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_long_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "o", "output", 1 )
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_double_dash_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "o", "output", 1 )
    ok: cla.flag_marker() == std::string( "--" )
    ok: cla.flag_name() == std::string( "output" )
    ok: cla.flag() == "--output"
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag( "o" )
    ok: cla.ensure( 2, "-o flag requires 2 parameters" )
    ok: cla.is_flag( "o", 2, "-o flag requires 2 parameters" )
    ok: cla.next() == std::string( "my-file.txt" )
    ok: cla.next() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla
    ok: cla.is_flag( "o" )
    ok: cla.ensure( 3 ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla
    ok: cla.is_flag( "o", 3 ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla
    ok: cla.is_flag( "o" )
    ok: cla.ensure( 3, "-o flag requires 3 parameters" ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla
    ok: cla.is_flag( "o", 3, "-o flag requires 3 parameters" ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_help ) )
    ok: cla
    ok: cla.ensure( 1 ) == false
    ok: cla.empty()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    HistoryBuffer [test-history-buffer.cpp:70]
    ==========================================
      #### Ensure copy construct and assignment is OK ####
      #### Single character operation - Add then rewind ####
      : t_HistoryBufferChar4 hb
    ok: ! hb.has_back()
      : hb.push( 'a' )
    ok: hb.has_back() == false
    ok: hb.get() == 'a'
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Two character operation - Add then rewind ####
      : t_HistoryBufferChar4 hb
    ok: ! hb.has_back()
      : hb.push( 'a' )
      : hb.push( 'b' )
    ok: hb.has_back() == true
    ok: hb.get() == 'b'
    ok: hb.get() == 'b'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Two character operation with frwd move ####
      : t_HistoryBufferChar4 hb
    ok: ! hb.has_back()
      : hb.push( 'a' )
      : hb.push( 'b' )
    ok: hb.has_back() == true
    ok: hb.get() == 'b'
    ok: hb.get() == 'b'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
    ok: hb.has_frwd() == true
      : hb.go_frwd()
    ok: hb.get() == 'b'
    ok: hb.has_frwd() == false
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Two character operation with third added after go_back() ####
      : t_HistoryBufferChar4 hb
    ok: ! hb.has_back()
      : hb.push( 'a' )
      : hb.push( 'b' )
    ok: hb.has_back() == true
    ok: hb.get() == 'b'
    ok: hb.get() == 'b'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
    ok: hb.has_frwd() == true
      : hb.push( 'c' )
    ok: hb.has_frwd() == false
    ok: hb.get() == 'c'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Four character operation - Buffer filled but not wrapped - Add then rewind ####
      : t_HistoryBufferChar4 hb
      : hb.push( 'a' )
      : hb.push( 'b' )
      : hb.push( 'c' )
      : hb.push( 'd' )
    ok: hb.has_back() == true
    ok: hb.get() == 'd'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'c'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'b'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Six character operation - More than can fit in buffer ####
      : t_HistoryBufferChar4 hb
      : hb.push( 'a' )
      : hb.push( 'b' )
      : hb.push( 'c' )
      : hb.push( 'd' )
      : hb.push( 'e' )
      : hb.push( 'f' )
    ok: hb.has_back() == true
    ok: hb.get() == 'f'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'e'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'd'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'c'
    ok: ! hb.has_back()
      #### Six character operation with more added after go_back() ####
      : t_HistoryBufferChar4 hb
      : hb.push( 'a' )
      : hb.push( 'b' )
      : hb.push( 'c' )
      : hb.push( 'd' )
      : hb.push( 'e' )
      : hb.push( 'f' )
    ok: hb.has_back() == true
    ok: hb.get() == 'f'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'e'
    ok: hb.has_back()
      : hb.go_back()
      : hb.push( 'g' )
    ok: hb.get() == 'g'
    ok: hb.has_back()
      : hb.go_back()
      : hb.push( 'h' )
      : hb.push( 'i' )
    ok: hb.get() == 'i'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'h'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'd'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'c'
    ok: ! hb.has_back()
      #### Buffer wrapped many times operation - includes push() after go_back() ####
      : t_HistoryBufferChar4 hb
      : hb.push( 'a' )
      : hb.push( 'b' )
      : hb.push( 'c' )
      : hb.push( 'd' )
      : hb.push( 'e' )
      : hb.push( 'f' )
    ok: hb.has_back() == true
    ok: hb.get() == 'f'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'e'
    ok: hb.has_back()
      : hb.go_back()
      : hb.push( 'g' )
    ok: hb.get() == 'g'
    ok: hb.has_frwd() == false
    ok: hb.get() == 'g'
    ok: hb.has_back()
      : hb.go_back()
      : hb.push( 'h' )
    ok: hb.has_frwd() == false
    ok: hb.get() == 'h'
      : hb.push( 'i' )
    ok: hb.has_frwd() == false
    ok: hb.get() == 'i'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'h'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'd'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'c'
    ok: ! hb.has_back()
      #### clear() method ####
      : t_HistoryBufferChar4 hb
      : hb.push( 'a' )
      : hb.push( 'b' )
      : hb.push( 'c' )
      : hb.push( 'd' )
    ok: hb.has_back() == true
    ok: hb.get() == 'd'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'c'
      : hb.clear()
    ok: ! hb.has_frwd()
    ok: ! hb.has_back()
      : hb.push( 'a' )
      : hb.push( 'b' )
      : hb.push( 'c' )
      : hb.push( 'd' )
      : hb.push( 'e' )
    ok: hb.has_back() == true
    ok: hb.get() == 'e'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.has_back() == true
    ok: hb.get() == 'd'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'c'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'b'
    ok: ! hb.has_back()
      #### Check resource release with two element operation ####
      : t_HistoryBufferTypeWithResource4 hb
    ok: ! hb.has_back()
      : hb.push( TypeWithResource( 1 ) )
      : hb.push( TypeWithResource( 2 ) )
    ok: hb.has_back() == true
    ok: hb.get() == 2
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 1
    ok: ! hb.has_back()
      #### Six character operation - More than can fit in buffer ####
      : t_HistoryBufferTypeWithResource4 hb
      : hb.push( TypeWithResource( 'a' ) )
      : hb.push( TypeWithResource( 'b' ) )
      : hb.push( TypeWithResource( 'c' ) )
      : hb.push( TypeWithResource( 'd' ) )
      : hb.push( TypeWithResource( 'e' ) )
      : hb.push( TypeWithResource( 'f' ) )
    ok: hb.has_back() == true
    ok: hb.get() == 'f'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'e'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'd'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'c'
    ok: ! hb.has_back()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    iterator_range [test-iterator-range.cpp:43]
    ===========================================
    ok: ir
    ok: *ir == "0"
    ok: ir->at(0) == '0'
    ok: ir
    ok: *ir == "1"
    ok: ir->at(0) == '1'
    ok: ir
    ok: *ir == "2"
    ok: ir->at(0) == '2'
    ok: ! ir
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    const_iterator_range [test-iterator-range.cpp:67]
    =================================================
    ok: ir
    ok: *ir == "0"
    ok: ir->at(0) == '0'
    ok: ir
    ok: *ir == "1"
    ok: ir->at(0) == '1'
    ok: ir
    ok: *ir == "2"
    ok: ir->at(0) == '2'
    ok: ! ir
    ok: ir
    ok: *ir == "0"
    ok: ir->at(0) == '0'
    ok: ir
    ok: *ir == "1"
    ok: ir->at(0) == '1'
    ok: ir
    ok: *ir == "2"
    ok: ir->at(0) == '2'
    ok: ! ir
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    iterator_range example in loop [test-iterator-range.cpp:118]
    ============================================================
    ok: total_string_length == 3
    ok: total_string_length == 3
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ptr_vector - create, push_back [test-ptr-vector.cpp:42]
    =======================================================
    ok: pv.size() == 0
    ok: pv.empty()
    ok: pv.size() == 1
    ok: ! pv.empty()
    ok: pv[0] == "s0"
    ok: pv.at(0) == "s0"
    ok: pv.size() == 2
    ok: ! pv.empty()
    ok: pv[0] == "s0"
    ok: pv.at(0) == "s0"
    ok: pv[1] == "s1"
    ok: pv.at(1) == "s1"
    ok: pv.size() == 3
    ok: ! pv.empty()
    ok: pv[0] == "s0"
    ok: pv.at(0) == "s0"
    ok: pv[1] == "s1"
    ok: pv.at(1) == "s1"
    ok: pv[2] == "s2"
    ok: pv.at(2) == "s2"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ptr_vector - copy, assign, swap [test-ptr-vector.cpp:77]
    ========================================================
    ok: pv2.size() == 3
    ok: ! pv2.empty()
    ok: pv2[0] == "s0"
    ok: pv2.at(0) == "s0"
    ok: pv2[1] == "s1"
    ok: pv2.at(1) == "s1"
    ok: pv2[2] == "s2"
    ok: pv2.at(2) == "s2"
    ok: pv2[0] == pv[0]
    ok: pv2[0] == "other s0"
    ok: pv[0] == "s0"
    ok: pv2[0] != pv[0]
    ok: pv2[0] == pv[0]
    ok: pv2[0] != pv[0]
    ok: pv[1] == "c2s1"
    ok: pv2[1] == "c1s1"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ptr_vector - iterators [test-ptr-vector.cpp:116]
    ================================================
    ok: i != end
    ok: *i == "s0"
    ok: i->at(1) == '0'
    ok: i != end
    ok: *i == "s1"
    ok: i->at(1) == '1'
    ok: i != end
    ok: *i == "s2"
    ok: i->at(1) == '2'
    ok: i == end
    ok: i != end
    ok: *i == "s0"
    ok: i->at(1) == '0'
    ok: i != end
    ok: *i == "s1"
    ok: i->at(1) == '1'
    ok: i != end
    ok: *i == "s2"
    ok: i->at(1) == '2'
    ok: i == end
    ok: i != end
    ok: *i == "s0"
    ok: i->at(1) == '0'
    ok: i != end
    ok: *i == "s1"
    ok: i->at(1) == '1'
    ok: i != end
    ok: *i == "s2"
    ok: i->at(1) == '2'
    ok: i == end
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ptr_vector - back, front [test-ptr-vector.cpp:179]
    ==================================================
    ok: pv.front() == "s0"
    ok: pv.back() == "s2"
    ok: cpv.front() == "s0"
    ok: cpv.back() == "s2"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - String only [test-str-args.cpp:61]
    =============================================
    ok: str_args().expand( "in" ) == "in"
    ok: expand( "in", 18 ) == "in"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - %% [test-str-args.cpp:67]
    ====================================
    ok: expand( "i%%n", 18 ) == "i%n"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Positional indexing [test-str-args.cpp:72]
    =====================================================
    ok: expand( "i%0n", 18 ) == "i18n"
    ok: expand( "i%08n", 1 ) == "i18n"
    ok: expand( "i%{0}n", 18 ) == "i18n"
    ok: expand( "i%{0:eighteen}n", 18 ) == "i18n"
    ok: expand( "%0in", 18 ) == "18in"
    ok: expand( "%{0}in", 18 ) == "18in"
    ok: expand( "%{0:eighteen}in", 18 ) == "18in"
    ok: expand( "in%0", 18 ) == "in18"
    ok: expand( "in%{0}", 18 ) == "in18"
    ok: expand( "in%{0:eighteen}", 18 ) == "in18"
    ok: expand( "i%{0:eighteen}n%0out", 18 ) == "i18n18out"
    ok: expand( "i%{0:eighteen}n%1out", 18, 19 ) == "i18n19out"
    ok: expand( "i%{1:eighteen}n%0out", 18, 19 ) == "i19n18out"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Big indexes [test-str-args.cpp:93]
    =============================================
    ok: expand( "i%{18}n", str_args( 0 ) << 1 << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16 << 17 << 18 ) == "i18n"
    ok: expand( "i%{18:12}n", str_args( 0 ) << 1 << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16 << 17 << 18 ) == "i18n"
    ok: expand( "i%{18}%22n", str_args( 0 ) << 1 << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16 << 17 << 18 ) == "i1822n"
    ok: expand( "i%{18}%{12}n", str_args( 0 ) << 1 << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16 << 17 << 18 ) == "i1812n"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Bad index throws exception [test-str-args.cpp:105]
    =============================================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Expand different types by construction [test-str-args.cpp:120]
    =========================================================================
    ok: expand( "i%0n", 18 ) == "i18n"
    ok: expand( "i%0n", str_args( 18 ) ) == "i18n"
    ok: expand( "i%0n", std::string( "nternationalisatio" ) ) == "internationalisation"
    ok: expand( "i%0n", (char)'c' ) == "icn"
    ok: expand( "i%0n", "nternationalisatio" ) == "internationalisation"
    ok: expand( "i%0n", true ) == "i1n"
    ok: expand( "i%0n", OutputMumble() ) == "iMumblen"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Expand different types by left-shift operator [test-str-args.cpp:131]
    ================================================================================
    ok: expand( "i%0n", str_args() << 18 ) == "i18n"
    ok: expand( "i%0n", str_args() << str_args( 18 ) ) == "i18n"
    ok: expand( "i%0n", str_args() << std::string( "nternationalisatio" ) ) == "internationalisation"
    ok: expand( "i%0n", str_args() << (char)'c' ) == "icn"
    ok: expand( "i%0n", str_args() << "nternationalisatio" ) == "internationalisation"
    ok: expand( "i%0n", str_args() << true ) == "i1n"
    ok: expand( "i%0n", str_args() << OutputMumble() ) == "iMumblen"
    ok: expand( "i%1n", str_args(1) << 18 ) == "i18n"
    ok: expand( "i%1n", str_args(1) << str_args( 18 ) ) == "i18n"
    ok: expand( "i%1n", str_args(1) << std::string( "nternationalisatio" ) ) == "internationalisation"
    ok: expand( "i%1n", str_args(1) << (char)'c' ) == "icn"
    ok: expand( "i%1n", str_args(1) << "nternationalisatio" ) == "internationalisation"
    ok: expand( "i%1n", str_args(1) << true ) == "i1n"
    ok: expand( "i%1n", str_args(1) << OutputMumble() ) == "iMumblen"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Named parameters [test-str-args.cpp:150]
    ===================================================
    ok: expand( "i%{eighteen}n", "eighteen", 18 ) == "i18n"
    ok: expand( "First: %{first}, Second: %{second}", str_args() << "second" << "2nd" << "first" << "1st" ) == "First: 1st, Second: 2nd"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Malformed formats [test-str-args.cpp:158]
    ====================================================
    ok: expand( "i%", 18 ) == "i%"
    ok: expand( "i%n", 18 ) == "i%n"
    ok: expand( "i%{0", 18 ) == "i18"
    ok: expand( "i%{0 ", 18 ) == "i18"
    ok: expand( "i%{0not", 18 ) == "i18"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    convert - Unchecked from_string() [test-str-convert.cpp:42]
    ===========================================================
    ok: from_string<int>( "123" ) == 123
    ok: from_string<int>( "   123" ) == 123
    ok: from_string<float>( "123.5" ) == 123.5
    ok: from_string<bool>( "false" ) == false
    ok: from_string<bool>( "False" ) == false
    ok: from_string<bool>( "FALSE" ) == false
    ok: from_string<bool>( "true" ) == true
    ok: from_string<bool>( "True" ) == true
    ok: from_string<bool>( "TRUE" ) == true
    ok: from_string<bool>( "0" ) == false
    ok: from_string<bool>( "1" ) == true
    ok: from_string<bool>( "   false" ) == false
    ok: from_string<bool>( "   true" ) == true
    ok: from_string<bool>( "   0" ) == false
    ok: from_string<bool>( "   1" ) == true
    ok: from_string<int>( "foo" ) == 0
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    convert - Checked from_string() [test-str-convert.cpp:67]
    =========================================================
    ok: from_string( iout, "123" ) == true
    ok: iout == 123
    ok: from_string( iout, "   123" ) == true
    ok: iout == 123
    ok: from_string( fout, "123.5" ) == true
    ok: fout == 123.5
    ok: from_string( bout, "false" ) == true
    ok: bout == false
    ok: from_string( bout, "False" ) == true
    ok: bout == false
    ok: from_string( bout, "FALSE" ) == true
    ok: bout == false
    ok: from_string( bout, "true" ) == true
    ok: bout == true
    ok: from_string( bout, "True" ) == true
    ok: bout == true
    ok: from_string( bout, "TRUE" ) == true
    ok: bout == true
    ok: from_string( bout, "0" ) == true
    ok: bout == false
    ok: from_string( bout, "1" ) == true
    ok: bout == true
    ok: from_string( bout, "   false" ) == true
    ok: bout == false
    ok: from_string( bout, "   true" ) == true
    ok: bout == true
    ok: from_string( bout, "   0" ) == true
    ok: bout == false
    ok: from_string( bout, "   1" ) == true
    ok: bout == true
    ok: from_string( iout, "foo" ) == false
    ok: from_string( bout, "foo" ) == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    convert - to_string() [test-str-convert.cpp:113]
    ================================================
    ok: to_string( "foo" ) == "foo"
    ok: to_string( 123 ) == "123"
    ok: to_string( 123.5 ) == "123.5"
    ok: to_string( 0 ) == "0"
    ok: to_string( 1 ) == "1"
    ok: to_string( true ) == "true"
    ok: to_string( false ) == "false"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    [lr]?trim - copy [test-str-trim.cpp:42]
    =======================================
    ok: ltrim( "" ) == ""
    ok: ltrim( "  " ) == ""
    ok: ltrim( "  x" ) == "x"
    ok: ltrim( "\r\n \t\v\fxy" ) == "xy"
    ok: ltrim( "  x  " ) == "x  "
    ok: ltrim( "abx", "ab" ) == "x"
    ok: rtrim( "" ) == ""
    ok: rtrim( "  " ) == ""
    ok: rtrim( "x  " ) == "x"
    ok: rtrim( "xy\r\n \t\v\f" ) == "xy"
    ok: rtrim( "  x  " ) == "  x"
    ok: rtrim( "xab", "ab" ) == "x"
    ok: trim( "" ) == ""
    ok: trim( "  " ) == ""
    ok: trim( "x  " ) == "x"
    ok: trim( "\r\n \t\v\fxy\r\n \t\v\f" ) == "xy"
    ok: trim( "  x  " ) == "x"
    ok: trim( "abxab", "ab" ) == "x"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    [lr]?trim - in-place [test-str-trim.cpp:87]
    ===========================================
      Calling: test_in_place_ltrim( "", "" ) (89)
    ok: ltrim( &s ) == out
    ok: s == out
      Calling: test_in_place_ltrim( "  ", "" ) (90)
    ok: ltrim( &s ) == out
    ok: s == out
      Calling: test_in_place_ltrim( "  x", "x" ) (91)
    ok: ltrim( &s ) == out
    ok: s == out
      Calling: test_in_place_ltrim( "\r\n \t\v\fxy", "xy" ) (92)
    ok: ltrim( &s ) == out
    ok: s == out
      Calling: test_in_place_ltrim( "  x  ", "x  " ) (93)
    ok: ltrim( &s ) == out
    ok: s == out
      Calling: test_in_place_rtrim( "", "" ) (95)
    ok: rtrim( &s ) == out
    ok: s == out
      Calling: test_in_place_rtrim( "  ", "" ) (96)
    ok: rtrim( &s ) == out
    ok: s == out
      Calling: test_in_place_rtrim( "x  ", "x" ) (97)
    ok: rtrim( &s ) == out
    ok: s == out
      Calling: test_in_place_rtrim( "xy\r\n \t\v\f", "xy" ) (98)
    ok: rtrim( &s ) == out
    ok: s == out
      Calling: test_in_place_rtrim( "  x  ", "  x" ) (99)
    ok: rtrim( &s ) == out
    ok: s == out
      Calling: test_in_place_trim( "", "" ) (101)
    ok: trim( &s ) == out
    ok: s == out
      Calling: test_in_place_trim( "  ", "" ) (102)
    ok: trim( &s ) == out
    ok: s == out
      Calling: test_in_place_trim( "x  ", "x" ) (103)
    ok: trim( &s ) == out
    ok: s == out
      Calling: test_in_place_trim( "\r\n \t\v\fxy\r\n \t\v\f", "xy" ) (104)
    ok: trim( &s ) == out
    ok: s == out
      Calling: test_in_place_trim( "  x  ", "x" ) (105)
    ok: trim( &s ) == out
    ok: s == out
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0
0 error(s), 0 todo(s), 510 test(s)
