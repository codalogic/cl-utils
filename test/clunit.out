Tests run on Wed Aug 16 11:48:46 2017

    CommandLineArgs [test-command-line-args.cpp:92]
    ===============================================
      : CommandLineArgs cla( SIZED_ARGV( argv_none ) )
    ok: cla == false
    ok: cla.empty()
      : is_fake_help_run = false
      : CommandLineArgs cla( SIZED_ARGV( argv_none ), fake_help )
    ok: is_fake_help_run == true
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_none ) )
    ok: cla.empty()
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_help ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "?" )
    ok: cla.is_flag( "h", "?" )
    ok: cla.is_flag( "?", "h" )
    ok: cla.flag_marker() == std::string( "-" )
    ok: cla.flag_name() == std::string( "?" )
    ok: cla.flag() == "-?"
    ok: cla.is_flag( "other" ) == false
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag() == false
    ok: cla.current() == std::string( "my-file.txt" )
    ok: cla.flag_marker() == std::string( "" )
    ok: cla.flag_name() == std::string( "" )
    ok: cla.flag() == ""
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag() == false
    ok: cla.is_flag( "y-file.txt" ) == false
    ok: cla.is_flag( "xmy-file.txt" ) == false
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_single_file_name ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "o" )
    ok: cla.flag_marker() == std::string( "-" )
    ok: cla.flag_name() == std::string( "o" )
    ok: cla.flag() == "-o"
    ok: cla.is_flag( "o", 0 )
    ok: cla.is_flag( "o", 1 )
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_single_file_name ) )
    ok: cla.is_flag( "o", 2 ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "o", 1 )
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_long_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "output", 1 )
    ok: cla.flag_marker() == std::string( "-" )
    ok: cla.flag_name() == std::string( "output" )
    ok: cla.flag() == "-output"
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_long_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "o", "output", 1 )
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_double_dash_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag()
    ok: cla.is_flag( "o", "output", 1 )
    ok: cla.flag_marker() == std::string( "--" )
    ok: cla.flag_name() == std::string( "output" )
    ok: cla.flag() == "--output"
    ok: cla.next() == std::string( "my-file.txt" )
      : cla.next()
    ok: ! cla.empty()
    ok: cla.current() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla == true
    ok: ! cla.empty()
    ok: cla.is_flag( "o" )
    ok: cla.ensure( 2, "-o flag requires 2 parameters" )
    ok: cla.is_flag( "o", 2, "-o flag requires 2 parameters" )
    ok: cla.next() == std::string( "my-file.txt" )
    ok: cla.next() == std::string( "my-other-file.txt" )
      : cla.next()
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla
    ok: cla.is_flag( "o" )
    ok: cla.ensure( 3 ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla
    ok: cla.is_flag( "o", 3 ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla
    ok: cla.is_flag( "o" )
    ok: cla.ensure( 3, "-o flag requires 3 parameters" ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_flag_and_file_names ) )
    ok: cla
    ok: cla.is_flag( "o", 3, "-o flag requires 3 parameters" ) == false
    ok: cla.empty()
      : CommandLineArgs cla( SIZED_ARGV( argv_help ) )
    ok: cla
    ok: cla.ensure( 1 ) == false
    ok: cla.empty()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    HistoryBuffer [test-history-buffer.cpp:76]
    ==========================================
      #### Ensure copy construct and assignment is OK ####
      #### Single character operation - Add then rewind ####
      : t_HistoryBufferChar4 hb
    ok: ! hb.has_back()
      : hb.push( 'a' )
    ok: hb.has_back() == false
    ok: hb.get() == 'a'
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Two character operation - Add then rewind ####
      : t_HistoryBufferChar4 hb
    ok: ! hb.has_back()
      : hb.push( 'a' )
      : hb.push( 'b' )
    ok: hb.has_back() == true
    ok: hb.get() == 'b'
    ok: hb.get() == 'b'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Two character operation with frwd move ####
      : t_HistoryBufferChar4 hb
    ok: ! hb.has_back()
      : hb.push( 'a' )
      : hb.push( 'b' )
    ok: hb.has_back() == true
    ok: hb.get() == 'b'
    ok: hb.get() == 'b'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
    ok: hb.has_frwd() == true
      : hb.go_frwd()
    ok: hb.get() == 'b'
    ok: hb.has_frwd() == false
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Two character operation with third added after go_back() ####
      : t_HistoryBufferChar4 hb
    ok: ! hb.has_back()
      : hb.push( 'a' )
      : hb.push( 'b' )
    ok: hb.has_back() == true
    ok: hb.get() == 'b'
    ok: hb.get() == 'b'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
    ok: hb.has_frwd() == true
      : hb.push( 'c' )
    ok: hb.has_frwd() == false
    ok: hb.get() == 'c'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Four character operation - Buffer filled but not wrapped - Add then rewind ####
      : t_HistoryBufferChar4 hb
      : hb.push( 'a' )
      : hb.push( 'b' )
      : hb.push( 'c' )
      : hb.push( 'd' )
    ok: hb.has_back() == true
    ok: hb.get() == 'd'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'c'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'b'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'a'
    ok: ! hb.has_back()
      #### Six character operation - More than can fit in buffer ####
      : t_HistoryBufferChar4 hb
      : hb.push( 'a' )
      : hb.push( 'b' )
      : hb.push( 'c' )
      : hb.push( 'd' )
      : hb.push( 'e' )
      : hb.push( 'f' )
    ok: hb.has_back() == true
    ok: hb.get() == 'f'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'e'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'd'
    ok: hb.has_back()
      : hb.go_back()
    ok: hb.get() == 'c'
    ok: ! hb.has_back()
      #### Six character operation with more added after go_back() ####
      : t_HistoryBufferChar4 hb
      : hb.push( 'a' )
      : hb.push( 'b' )
      : hb.push( 'c' )
      : h