Tests run on Wed Jul 27 17:44:29 2016

    iterator_range [test-iterator-range.cpp:43]
    ===========================================
    ok: ir
    ok: *ir == "0"
    ok: ir->at(0) == '0'
    ok: ir
    ok: *ir == "1"
    ok: ir->at(0) == '1'
    ok: ir
    ok: *ir == "2"
    ok: ir->at(0) == '2'
    ok: ! ir
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    const_iterator_range [test-iterator-range.cpp:67]
    =================================================
    ok: ir
    ok: *ir == "0"
    ok: ir->at(0) == '0'
    ok: ir
    ok: *ir == "1"
    ok: ir->at(0) == '1'
    ok: ir
    ok: *ir == "2"
    ok: ir->at(0) == '2'
    ok: ! ir
    ok: ir
    ok: *ir == "0"
    ok: ir->at(0) == '0'
    ok: ir
    ok: *ir == "1"
    ok: ir->at(0) == '1'
    ok: ir
    ok: *ir == "2"
    ok: ir->at(0) == '2'
    ok: ! ir
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    iterator_range example in loop [test-iterator-range.cpp:118]
    ============================================================
    ok: total_string_length == 3
    ok: total_string_length == 3
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ptr_vector - create, push_back [test-ptr-vector.cpp:42]
    =======================================================
    ok: pv.size() == 0
    ok: pv.empty()
    ok: pv.size() == 1
    ok: ! pv.empty()
    ok: pv[0] == "s0"
    ok: pv.at(0) == "s0"
    ok: pv.size() == 2
    ok: ! pv.empty()
    ok: pv[0] == "s0"
    ok: pv.at(0) == "s0"
    ok: pv[1] == "s1"
    ok: pv.at(1) == "s1"
    ok: pv.size() == 3
    ok: ! pv.empty()
    ok: pv[0] == "s0"
    ok: pv.at(0) == "s0"
    ok: pv[1] == "s1"
    ok: pv.at(1) == "s1"
    ok: pv[2] == "s2"
    ok: pv.at(2) == "s2"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ptr_vector - copy, assign, swap [test-ptr-vector.cpp:77]
    ========================================================
    ok: pv2.size() == 3
    ok: ! pv2.empty()
    ok: pv2[0] == "s0"
    ok: pv2.at(0) == "s0"
    ok: pv2[1] == "s1"
    ok: pv2.at(1) == "s1"
    ok: pv2[2] == "s2"
    ok: pv2.at(2) == "s2"
    ok: pv2[0] == pv[0]
    ok: pv2[0] == "other s0"
    ok: pv[0] == "s0"
    ok: pv2[0] != pv[0]
    ok: pv2[0] == pv[0]
    ok: pv2[0] != pv[0]
    ok: pv[1] == "c2s1"
    ok: pv2[1] == "c1s1"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ptr_vector - iterators [test-ptr-vector.cpp:116]
    ================================================
    ok: i != end
    ok: *i == "s0"
    ok: i->at(1) == '0'
    ok: i != end
    ok: *i == "s1"
    ok: i->at(1) == '1'
    ok: i != end
    ok: *i == "s2"
    ok: i->at(1) == '2'
    ok: i == end
    ok: i != end
    ok: *i == "s0"
    ok: i->at(1) == '0'
    ok: i != end
    ok: *i == "s1"
    ok: i->at(1) == '1'
    ok: i != end
    ok: *i == "s2"
    ok: i->at(1) == '2'
    ok: i == end
    ok: i != end
    ok: *i == "s0"
    ok: i->at(1) == '0'
    ok: i != end
    ok: *i == "s1"
    ok: i->at(1) == '1'
    ok: i != end
    ok: *i == "s2"
    ok: i->at(1) == '2'
    ok: i == end
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ptr_vector - back, front [test-ptr-vector.cpp:179]
    ==================================================
    ok: pv.front() == "s0"
    ok: pv.back() == "s2"
    ok: cpv.front() == "s0"
    ok: cpv.back() == "s2"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - String only [test-str-args.cpp:61]
    =============================================
    ok: str_args().expand( "in" ) == "in"
    ok: expand( "in", 18 ) == "in"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - %% [test-str-args.cpp:67]
    ====================================
    ok: expand( "i%%n", 18 ) == "i%n"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Positional indexing [test-str-args.cpp:72]
    =====================================================
    ok: expand( "i%0n", 18 ) == "i18n"
    ok: expand( "i%{0}n", 18 ) == "i18n"
    ok: expand( "i%{0:eighteen}n", 18 ) == "i18n"
    ok: expand( "%0in", 18 ) == "18in"
    ok: expand( "%{0}in", 18 ) == "18in"
    ok: expand( "%{0:eighteen}in", 18 ) == "18in"
    ok: expand( "in%0", 18 ) == "in18"
    ok: expand( "in%{0}", 18 ) == "in18"
    ok: expand( "in%{0:eighteen}", 18 ) == "in18"
    ok: expand( "i%{0:eighteen}n%0out", 18 ) == "i18n18out"
    ok: expand( "i%{0:eighteen}n%1out", 18, 19 ) == "i18n19out"
    ok: expand( "i%{1:eighteen}n%0out", 18, 19 ) == "i19n18out"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Big indexes [test-str-args.cpp:92]
    =============================================
    ok: expand( "i%{18}n", str_args( 0 ) << 1 << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16 << 17 << 18 ) == "i18n"
    ok: expand( "i%{18:12}n", str_args( 0 ) << 1 << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16 << 17 << 18 ) == "i18n"
    ok: expand( "i%{18}%22n", str_args( 0 ) << 1 << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16 << 17 << 18 ) == "i1822n"
    ok: expand( "i%{18}%{12}n", str_args( 0 ) << 1 << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16 << 17 << 18 ) == "i1812n"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Bad index throws exception [test-str-args.cpp:104]
    =============================================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Expand different types by construction [test-str-args.cpp:119]
    =========================================================================
    ok: expand( "i%0n", 18 ) == "i18n"
    ok: expand( "i%0n", str_args( 18 ) ) == "i18n"
    ok: expand( "i%0n", std::string( "nternationalisatio" ) ) == "internationalisation"
    ok: expand( "i%0n", (char)'c' ) == "icn"
    ok: expand( "i%0n", "nternationalisatio" ) == "internationalisation"
    ok: expand( "i%0n", true ) == "i1n"
    ok: expand( "i%0n", OutputMumble() ) == "iMumblen"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    str_args - Expand different types by left-shift operator [test-str-args.cpp:130]
    ================================================================================
    ok: expand( "i%0n", str_args() << 18 ) == "i18n"
    ok: expand( "i%0n", str_args() << str_args( 18 ) ) == "i18n"
    ok: expand( "i%0n", str_args() << std::string( "nternationalisatio" ) ) == "internationalisation"
    ok: expand( "i%0n", str_args() << (char)'c' ) == "icn"
    ok: expand( "i%0n", str_args() << "nternationalisatio" ) == "internationalisation"
    ok: expand( "i%0n", str_args() << true ) == "i1n"
    ok: expand( "i%0n", str_args() << OutputMumble() ) == "iMumblen"
    ok: expand( "i%1n", str_args(1) << 18 ) == "i18n"
    ok: expand( "i%1n", str_args(1) << str_args( 18 ) ) == "i18n"
    ok: expand( "i%1n", str_args(1) << std::string( "nternationalisatio" ) ) == "internationalisation"
    ok: expand( "i%1n", str_args(1) << (char)'c' ) == "icn"
    ok: expand( "i%1n", str_args(1) << "nternationalisatio" ) == "internationalisation"
    ok: expand( "i%1n", str_args(1) << true ) == "i1n"
    ok: expand( "i%1n", str_args(1) << OutputMumble() ) == "iMumblen"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (1):
------------------------
- Implement str_args_detail::process_named_long_form_parameter_decl() [test-str-args.cpp:149]

0 error(s), 1 todo(s), 158 test(s)
